###why OOP?
- 부품 -> 부품들을 조립해서 완제품
- Object->Object들을 조립해서 완성된 프로그램
- Object는 속성(field)와 기능(method)를 포함할 수 있음
	- (Object의 예 : 사람, 자동차 타이어... 모든 사물)
	- (사람은 name이라는 속성과 달리다/걷다 (method)를 포함할 수 있음.

` 즉, 대형 프로그램을 할 때, 한 사람이 완제품을 만들기 어려움, 부품(객체)단위로 
나눠서 여러 사람이 만들어서, 조립을 하는 것이 효율적임 -> 협력을 해서 대형 프로그램을
만들고자 하는 노력이 OOP개념을 탄생 시킴 `

###Key concept in OOP
 - Encapsulation : 외부 Object가 접근을 못하게 함. 중요 필드와 메소드를 보호.
 - Inheritance (상위객체 + 하위객체) : 중복 코드를 줄요서 빨리 설계하도록 함. 
 - Polymorphism : 같은 타입이지만 실행 결과가 다양한 객체를 만들게 함 (e.g. sonata, grandeur)

### Object & Class
 - Specification ( Class) -> Objec(instance)
붕어빵을 만들 때, 붕어빵 틀에서 밀가루를 넣고 나서, 완성이 되어야지
<br>
붕어빵이라는 객체가 생기잖아.
이 때 붕어빵이 인스턴스이고 ,붕어빵 틀이 class , specification이야 
<br><br>

` C에서는 동적메모리할당을 말록을 쓰든 하는데,
자바에서는 알아서 메모리 관리를 해줌. 메모리 관리 측면에서는 편리
C에서는 메모리를 직접 관리하다보니 더 정교하게 관리할 수 는 있겠지 `
------------------------------------


